from datetime import datetime, timedelta
import os
from _def_main_ import *

# Obtenemos el directorio actual del script
dir_path = os.path.dirname(os.path.realpath(__file__))

# Creamos un diccionario para llevar un registro de los usuarios que han usado el comando y el momento en que lo usaron por última vez.
users_last_command = {}


#def antispam(user_id, command2, message):
    #now = datetime.now()
    #username = message.from_user.username
   # chat_id = message.chat.id
    #conn = connect_to_db()
    #cursor = conn.cursor()
  #  user_id = message.from_user.id
    # Obtiene el estado del usuario desde la tabla "users"
    #cursor.execute('SELECT rango FROM users WHERE user_id = ?', (user_id,))
    #user_status = cursor.fetchone()

  #  if user_status:
     #   user_status = user_status[0]
   # else:
      #  user_status = "No registrado"

   # if "Owner" in user_status or "Seller" in user_status:
       # antispam_duration = 0
   # elif "Premium" in user_status:
       # antispam_duration = 20
    #else:
       # antispam_duration = 60

    #last_command_time = users_last_command.get(user_id, {}).get(command2)
   # if last_command_time:
       # time_since_last_command = now - last_command_time
       # if time_since_last_command < timedelta(seconds=antispam_duration):
           # time_remaining = antispam_duration - time_since_last_command.seconds
         #   return f"""
#⸻⸻⸻⸻
#♨️Proteccion Anti-Spam♨️
⸻⸻⸻⸻
#Espera {ime_remaining}s antes de usar un comando.#❗❗"""

   # users_last_command.setdefault(user_id, {})[command2] = now
 #   return None


#Antis-Spam System

#role = usuario.get["role"]

usuario = collection.find_one({"_id' messsge.from_user.id})

if usuario["role"] == "Owner" or usuario["role"] == "Seller":
    antispam = 5
elif usuario["Plan"] == "Premium":
    antispam = 15
else:
    antispam = 60

usuario["antispam"] = antispam

#if usuario["role"] == "Owner":
  #  pass

if    tiempo_usuario = int(usuario["time_user"])
    spam_time = int(time.time()) - tiempo_usuario
    if spam_time < usuario['antispam']:
        spam = usuario['antispam'] - spam_time
        texto_spam = f"""
⸻⸻⸻⸻
♨️Protección Anti-Spam♨️
⸻⸻⸻⸻
Espera {spam}s antes de hacer un nuevo chequeo.❗❗"""
        return await Client.send_message(_, chat_id=message.chat.id, text=texto_spam, reply_to_message_id=message.id)

    # Actualizar el tiempo del usuario en la colección
    collection.update_one({"_id": message.from_user.id}, {
                          "$set": {"time_user": int(time.time())}})

# Enviar respuesta
l = await message.reply(text=texto_1, quote=True)